[
    {
        "id": "53909232bb435dbf",
        "type": "tab",
        "label": "heatpump-tibber-pv",
        "disabled": false,
        "info": "",
        "env": [
            {
                "name": "estimatedPowerConsumption",
                "value": "4.4",
                "type": "num"
            },
            {
                "name": "powerConsumptionHours",
                "value": "8",
                "type": "num"
            },
            {
                "name": "solcastResourceId",
                "value": "",
                "type": "str"
            },
            {
                "name": "solcastApiKey",
                "value": "",
                "type": "str"
            },
            {
                "name": "tibberAuthorizationToken",
                "value": "",
                "type": "str"
            },
            {
                "name": "mandatoryHours",
                "value": "[[\"1-5\",4],[6,\"0-8\",4,[8]],[0,\"0-8\",4,[8]]]",
                "type": "json"
            },
            {
                "name": "fallbackHours",
                "value": "[[\"0-5\"],[6,8],[0,8]]",
                "type": "json"
            },
            {
                "name": "feedInTariff",
                "value": "0.1231",
                "type": "num"
            },
            {
                "name": "pvForecastFactor",
                "value": "0.33",
                "type": "num"
            },
            {
                "name": "distributeHours",
                "value": "[2,18,3]",
                "type": "json"
            }
        ]
    },
    {
        "id": "b29b435b87b59072",
        "type": "http request",
        "z": "53909232bb435dbf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "bdae3ff9e5158a9d"
            ]
        ]
    },
    {
        "id": "d9f83b41aefaa974",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "hourly pv forecast",
        "func": "node.debug(JSON.stringify(msg.payload));\n\nconst datefns = global.get('datefns');\nconst datefnstz = global.get('datefnstz')\nconst timeZone = env.get(\"TZ\");\nconst pvForecastFactor = env.get('pvForecastFactor');\n\nconst hourlyPvForecasts = {};\nconst result = (msg.payload.forecasts ?? []).forEach(item => {\n    const periodStartLocalTime = global.get('toZonedDate')(new Date(item.period_end));\n    const today = new Date();\n    if (datefns.isSameDay(periodStartLocalTime, today)) {\n        const key = datefnstz.format(periodStartLocalTime, 'yyyy-MM-dd\\'T\\'HH', { timeZone });\n        if (hourlyPvForecasts[key]) {\n            hourlyPvForecasts[key] = ((hourlyPvForecasts[key] + item.pv_estimate) / 2) * (pvForecastFactor ?? 1.0);\n        } else {\n            hourlyPvForecasts[key] = item.pv_estimate;\n        }\n    }\n});\n\nvar newMsg = { topic: 'hourlyPvForecasts', payload: hourlyPvForecasts };\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 100,
        "wires": [
            [
                "3c1d77dcd06ac48b",
                "698031ac418ee656",
                "b84ed09930c19163"
            ]
        ]
    },
    {
        "id": "c4d717c702fba9b0",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "hourly energy price",
        "func": "node.debug(JSON.stringify(msg.payload));\n\nvar datefns = global.get('datefns');\n\nconst hourlyEnergyPrices = {};\nconst result = msg.payload.data.viewer.homes[0].currentSubscription.priceInfo.today.forEach(item => {\n    const key = item.startsAt.substring(0, 13);\n    hourlyEnergyPrices[key] = item.total;\n});\n\nvar newMsg = { topic: 'hourlyEnergyPrices', payload: hourlyEnergyPrices };\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 420,
        "wires": [
            [
                "c5236fd572f60df7",
                "698031ac418ee656",
                "6e5ddfb6848b6013"
            ]
        ]
    },
    {
        "id": "7ad82c270b16a402",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "calculate cost",
        "func": "const hourlyPvForecasts = msg.payload.hourlyPvForecasts;\nconst hourlyEnergyPrices = msg.payload.hourlyEnergyPrices;\n\nconst estimatedPowerConsumptionKw = env.get('estimatedPowerConsumption');\nconst feedInTariff = env.get('feedInTariff');\n\nconst hourlyEnergyCosts = {};\nif (hourlyEnergyPrices && hourlyPvForecasts && estimatedPowerConsumptionKw) {\n    Object.keys(hourlyEnergyPrices).forEach(key => {\n        const hourlyEnergyPrice = hourlyEnergyPrices[key];\n        const hourlyPvForecast = hourlyPvForecasts[key] ?? 0;\n        const cost = hourlyEnergyPrice * (estimatedPowerConsumptionKw - hourlyPvForecast)\n            + hourlyPvForecast * feedInTariff;\n        hourlyEnergyCosts[key] = cost;\n    });\n}\n\nvar newMsg = { payload: hourlyEnergyCosts };\nnode.debug(JSON.stringify(newMsg.payload));\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 660,
        "wires": [
            [
                "57d358178e243538",
                "1f2cc1dddf7b1baf"
            ]
        ]
    },
    {
        "id": "57d358178e243538",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "choose cost efficient hours",
        "func": "var datefns = global.get('datefns');\n\nfunction sortMapByKey(input) {\n    return new Map([...input.entries()].sort());\n}\n\nfunction sortMapByValue(input) {\n    return new Map([...input.entries()].sort((a, b) => a[1] - b[1]));\n}\n\nfunction replacer(key, value) {\n    if (value instanceof Map) {\n        return {\n            dataType: 'Map',\n            value: Array.from(value.entries()),\n        };\n    } else {\n        return value;\n    }\n}\n\nfunction sortMapByKey(input) {\n    return new Map([...input.entries()].sort());\n}\n\nfunction sortMapByValue(input) {\n    return new Map([...input.entries()].sort((a, b) => a[1] - b[1]));\n}\n\nfunction getOffHoursBeforeMidnight(costEfficientHoursYesterday, considerationHours) {\n    if (costEfficientHoursYesterday.length > 0) {\n        node.debug(`costEfficientHoursYesterday=${costEfficientHoursYesterday}`);\n        const hourKey = costEfficientHoursYesterday[costEfficientHoursYesterday.length - considerationHours];\n        const hour = Number(new String(hourKey).substring(11));\n        const offHoursBeforeMidnight = 24 - hour - 1;\n        node.debug(`offHoursBeforeMidnight=${offHoursBeforeMidnight}`);\n        return offHoursBeforeMidnight;\n    }\n    return undefined;\n}\n\nfunction chooseCostEfficientHours(payload, powerConsumptionHours, costEfficientHoursYesterday, mandatoryHours, distributeHours) {\n    node.debug(`payload=${JSON.stringify(payload)}`);\n\n    node.debug(`distributeHours=${JSON.stringify(distributeHours)}`);\n    if (Array.isArray(distributeHours) && distributeHours.length === 3) {\n        const offHoursBeforeMidnight = getOffHoursBeforeMidnight(costEfficientHoursYesterday, distributeHours[0]);\n        if (offHoursBeforeMidnight) {\n            const offHoursRemainingAfterMidnight = distributeHours[1] - offHoursBeforeMidnight;\n            node.debug(`offHoursRemainingAfterMidnight=${offHoursRemainingAfterMidnight}`);\n            const mandatoryHoursForDistribution = ['0-6', `0-${offHoursRemainingAfterMidnight < distributeHours[2] ? distributeHours[2] - 1 : offHoursRemainingAfterMidnight - 1}`, distributeHours[2]];\n            node.debug(`mandatoryHoursForDistribution=${JSON.stringify(mandatoryHoursForDistribution)}`);\n            (mandatoryHours ?? []).push(mandatoryHoursForDistribution);\n        }\n    }\n\n    const hourKeys = Object.keys(payload);\n    node.debug(`hourKeys=${JSON.stringify(hourKeys)}`);\n    const hourlyCost = new Map();\n    hourKeys.forEach(key => hourlyCost.set(key, payload[key]));\n    node.debug(`hourlyCost=${JSON.stringify(hourlyCost, replacer)}`);\n\n    let hourlyCostSelected = new Map();\n    if (hourKeys.length > 0) {\n        const template = hourKeys[0];\n        const dow = datefns.getDay(global.get('toDateFromKey')(template));\n        if (mandatoryHours) {\n            const logHead = 'mandatory hours: ';\n            mandatoryHours.forEach(entry => {\n                node.debug(`${logHead}processing entry ${entry}`);\n                if (Array.isArray(entry)) {\n                    if (entry.length === 3 || entry.length === 4) {\n                        const dayOrRange = entry[0];\n                        const hourRange = entry[1];\n                        let hoursToBeSelected = Number(entry[2]);\n                        const hoursMandatory = entry[3] ? Array(entry[3]) : [];\n                        node.debug(`${logHead}  hoursToBeSelected(initially)=${hoursToBeSelected}`);\n                        if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                            \n                            const hourRangeWithCost = new Map();\n                            global.get('addSelectedHours')(template, hourRange, hourRangeWithCost, hourlyCost);\n                            const hourRangeWithCostSorted = sortMapByValue(hourRangeWithCost);\n                            node.debug(`${logHead}  hourRangeWithCostSorted=${JSON.stringify(hourRangeWithCostSorted, replacer)}`);\n\n                            hoursMandatory.forEach(hour => {\n                                const key = global.get('buildKey')(template, hour)\n                                hourlyCostSelected.set(key, hourlyCost.get(key));\n                                node.debug(`${logHead}  select: ${key}`);\n                                hourRangeWithCostSorted.delete(key);\n                                hourlyCost.delete(key);\n                                hoursToBeSelected--;\n                            });\n                            node.debug(`${logHead}  after mandatory: hourlyCostSelected=${hourlyCostSelected.size} hoursToBeSelected=${hoursToBeSelected}`);\n\n\n                            Array.from(hourRangeWithCostSorted.keys()).forEach(key => {\n                                if (Array.from(hourlyCostSelected.keys()).includes(key)) {\n                                    node.debug(`${logHead}  already selected: ${key}`);\n                                    hourRangeWithCostSorted.delete(key);\n                                    hoursToBeSelected--;\n                                }\n                            });\n\n                            node.debug(`${logHead}  remaining: hourlyCostSelected=${hourlyCostSelected.size} hoursToBeSelected=${hoursToBeSelected}`);\n                            if (hoursToBeSelected > 0) {\n                                Array.from(hourRangeWithCostSorted.keys()).forEach(key => {\n                                    if (hourlyCostSelected.size <= hoursToBeSelected) {\n                                        hourlyCostSelected.set(key, hourRangeWithCostSorted.get(key));\n                                        hourlyCost.delete(key);\n                                        node.debug(`${logHead}  select: ${key}`);\n                                    }\n                                });\n                            }\n                        }\n                    } else if (entry.length === 2) {\n                        const dayOrRange = entry[0];\n                        const hourOrRange = entry[1];\n                        if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                            global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                        }\n                    } else if (entry.length === 1) {\n                        const hourOrRange = entry[0];\n                        global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                    }\n                } else {\n                    const hourOrRange = entry;\n                    global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                }\n                node.debug(`${logHead}  result after entry processing: ${JSON.stringify(hourlyCostSelected, replacer)}`);\n            });\n        }\n\n        const hourlyCostSorted = sortMapByValue(hourlyCost);\n        node.debug(`hourlyCostSorted=${JSON.stringify(hourlyCostSorted, replacer)}`);\n        Array.from(hourlyCostSorted.keys()).forEach(key => {\n            if (hourlyCostSelected.size < powerConsumptionHours) {\n                hourlyCostSelected.set(key, hourlyCost.get(key));\n                node.debug(`select: ${key}`);\n            }\n        });\n        hourlyCostSelected = sortMapByKey(hourlyCostSelected);\n        node.debug(`hourlyCostSelected=${JSON.stringify(hourlyCostSelected, replacer)}`);\n    }\n    return [...hourlyCostSelected.keys()];\n}\n\nconst powerConsumptionHours = env.get('powerConsumptionHours');\nconst mandatoryHours = env.get('mandatoryHours');\nconst distributeHours = env.get('distributeHours');\nconst costEfficientHoursYesterday = flow.get('costEfficientHoursYesterday');\nconst hourlyCostSelectedKeys = chooseCostEfficientHours(msg.payload, powerConsumptionHours, costEfficientHoursYesterday, mandatoryHours, distributeHours);\nnode.debug(`hourlyCostSelectedKeys=${hourlyCostSelectedKeys}`);\nreturn { payload: hourlyCostSelectedKeys };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "155225f6120582e9",
                "7bb29d543d74996a"
            ]
        ]
    },
    {
        "id": "c57e2ce21a60b90e",
        "type": "ui_chart",
        "z": "53909232bb435dbf",
        "name": "",
        "group": "5fe71c3fd07a84a7",
        "order": 3,
        "width": "0",
        "height": "0",
        "label": "PV-Prognose",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1170,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3c1d77dcd06ac48b",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "generate pv forecast chart",
        "func": "const data = [];\nconst labels = [];\nObject.keys(msg.payload).slice(0, 24).forEach(key => {\n    data.push(msg.payload[key]);\n    labels.push(Number(key.substring(11)));\n});\nreturn { payload: [{ series: ['X'], data:[data], labels}]};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 100,
        "wires": [
            [
                "c57e2ce21a60b90e"
            ]
        ]
    },
    {
        "id": "c5236fd572f60df7",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "generate hourly energy price chart",
        "func": "const data = [];\nconst labels = [];\nObject.keys(msg.payload).forEach(key => {\n    data.push(msg.payload[key]);\n    labels.push(Number(key.substring(11)));\n});\nreturn { payload: [{ series: ['X'], data: [data], labels }] };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 420,
        "wires": [
            [
                "ca3d916f62f8ea22"
            ]
        ]
    },
    {
        "id": "ca3d916f62f8ea22",
        "type": "ui_chart",
        "z": "53909232bb435dbf",
        "name": "Hourly energy price",
        "group": "5fe71c3fd07a84a7",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Strompreis",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "cf8da99148e193d4",
        "type": "ui_chart",
        "z": "53909232bb435dbf",
        "name": "",
        "group": "5fe71c3fd07a84a7",
        "order": 7,
        "width": 0,
        "height": 0,
        "label": "Stromkosten",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1f2cc1dddf7b1baf",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "generate hourly cost chart",
        "func": "const data = [];\nconst labels = [];\nObject.keys(msg.payload).forEach(key => {\n    data.push(msg.payload[key]);\n    labels.push(Number(key.substring(11)));\n});\nreturn { payload: [{ series: ['X'], data: [data], labels }] };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 660,
        "wires": [
            [
                "cf8da99148e193d4"
            ]
        ]
    },
    {
        "id": "155225f6120582e9",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "generate most cost efficient hours chart",
        "func": "const data = [];\nconst labels = [];\n\nconst selectedHours = [];\nmsg.payload.forEach(key => selectedHours.push(Number(key.substring(11))));\n\nfor(let hour=0; hour<24; hour++) {\n    data.push(selectedHours.indexOf(hour) > -1 ? 1 : 0);\n    labels.push(hour);\n}\nreturn { payload: [{ series: ['X'], data: [data], labels }] };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 720,
        "wires": [
            [
                "15aabdd2187c0470"
            ]
        ]
    },
    {
        "id": "15aabdd2187c0470",
        "type": "ui_chart",
        "z": "53909232bb435dbf",
        "name": "",
        "group": "5fe71c3fd07a84a7",
        "order": 8,
        "width": 0,
        "height": 0,
        "label": "Kostengünstigste Stunden",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1230,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "b55dbfacaaa2e6ea",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "generate date from cache",
        "func": "var datefns = global.get('datefns');\n\nconst now = global.get('toZonedDate')(new Date(msg.payload));\n\nreturn { payload: datefns.format(now, \"dd.MM.yyyy - HH' Uhr'\") };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1040,
        "wires": [
            [
                "a9257c5fd597c372"
            ]
        ]
    },
    {
        "id": "a9257c5fd597c372",
        "type": "ui_text",
        "z": "53909232bb435dbf",
        "group": "5fe71c3fd07a84a7",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Zeitfenster",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1190,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d3a56c54933e3010",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "is selected hour?",
        "func": "var datefns = global.get('datefns');\n\nconst costEfficientHours = flow.get('costEfficientHours');\n\nconst now = global.get('toZonedDate')(new Date(msg.payload));\nconst key = datefns.format(now, \"yyyy-MM-dd'T'HH\");\nconst isSelectedHour = costEfficientHours ? costEfficientHours.indexOf(key) > -1 : false;\n\nreturn { payload: isSelectedHour };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1100,
        "wires": [
            [
                "dbf24f3be6ed46a2",
                "89a6f3b395f8d1a3"
            ]
        ]
    },
    {
        "id": "698031ac418ee656",
        "type": "join",
        "z": "53909232bb435dbf",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "7ad82c270b16a402"
            ]
        ]
    },
    {
        "id": "74baf2009a51d306",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "prepare HTP request",
        "func": "const solcastResourceId = env.get('solcastResourceId');\nconst solcastApiKey = env.get('solcastApiKey');\nreturn { url: `https://api.solcast.com.au/rooftop_sites/${solcastResourceId}/forecasts?format=json&api_key=${solcastApiKey}`};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            [
                "b29b435b87b59072"
            ]
        ]
    },
    {
        "id": "84d4c93abcdeb85e",
        "type": "http request",
        "z": "53909232bb435dbf",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.tibber.com/v1-beta/gql",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "authorization"
            },
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 570,
        "y": 420,
        "wires": [
            [
                "69b5a3c741b62380"
            ]
        ]
    },
    {
        "id": "d4af6a26fcce30b5",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "prepare HTP request",
        "func": "return {\n  authorization: `Bearer ${env.get('tibberAuthorizationToken')}`,\n  payload: '{\"query\":\"{viewer {homes {currentSubscription {priceInfo {today {total startsAt}}}}}}\"}'\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "84d4c93abcdeb85e"
            ]
        ]
    },
    {
        "id": "89a6f3b395f8d1a3",
        "type": "rpi-gpio out",
        "z": "53909232bb435dbf",
        "name": "Solid State Relay",
        "pin": "21",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1210,
        "y": 1180,
        "wires": []
    },
    {
        "id": "ce75ec3164ec175e",
        "type": "inject",
        "z": "53909232bb435dbf",
        "name": "on",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "jsonata",
        "x": 110,
        "y": 1180,
        "wires": [
            [
                "89a6f3b395f8d1a3",
                "dbf24f3be6ed46a2"
            ]
        ]
    },
    {
        "id": "8eeffa25c3a600df",
        "type": "inject",
        "z": "53909232bb435dbf",
        "name": "off",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "jsonata",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "89a6f3b395f8d1a3",
                "dbf24f3be6ed46a2"
            ]
        ]
    },
    {
        "id": "7b3ceb9671e7a2f7",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "lib:dateFunctions",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "global.set('toZonedDate', function (date) {\n    const datefnstz = global.get('datefnstz')\n    const timeZone = 'Europe/Berlin'\n    return datefnstz.utcToZonedTime(date, env.get(\"TZ\"));\n});\n\nglobal.set('toDateFromKey', function (dateKey) {\n    return new Date(\n        Number.parseInt(dateKey.substring(0, 4)),\n        Number.parseInt(dateKey.substring(5, 7)) - 1,\n        Number.parseInt(dateKey.substring(8, 10))\n    );\n});\n",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "99bfaf7045376159",
        "type": "cronplus",
        "z": "53909232bb435dbf",
        "name": "check hour",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 0 * * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "b55dbfacaaa2e6ea",
                "d3a56c54933e3010"
            ]
        ]
    },
    {
        "id": "0ee45497984ec87b",
        "type": "cronplus",
        "z": "53909232bb435dbf",
        "name": "trigger api calls",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "16 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 240,
        "wires": [
            [
                "d4af6a26fcce30b5",
                "74baf2009a51d306"
            ]
        ]
    },
    {
        "id": "bdae3ff9e5158a9d",
        "type": "switch",
        "z": "53909232bb435dbf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "forecasts",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "response_status",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 100,
        "wires": [
            [
                "d9f83b41aefaa974"
            ],
            [
                "5e5f360b13fe2087",
                "c06b83343f2137ce"
            ]
        ]
    },
    {
        "id": "3e88d48aa4f8c88f",
        "type": "ui_text",
        "z": "53909232bb435dbf",
        "group": "5fe71c3fd07a84a7",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "PV forecast status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#000000",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "5e5f360b13fe2087",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "extract error message",
        "func": "return { payload: msg.payload.response_status.message };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 240,
        "wires": [
            [
                "3e88d48aa4f8c88f"
            ]
        ]
    },
    {
        "id": "b84ed09930c19163",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "extract date",
        "func": "var datefns = global.get('datefns');\n\nconst date = global.get('toDateFromKey')(Object.keys(msg.payload)[0]);\nconst zoneDate = global.get('toZonedDate')(date);\n\nreturn { payload: `Daten für ${datefns.format(zoneDate, \"dd.MM.yyyy\")}`};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 200,
        "wires": [
            [
                "3e88d48aa4f8c88f"
            ]
        ]
    },
    {
        "id": "ccd9d8a62a4caa7a",
        "type": "ui_text",
        "z": "53909232bb435dbf",
        "group": "5fe71c3fd07a84a7",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Hourly energy price status",
        "label": "Status:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#000000",
        "x": 1210,
        "y": 520,
        "wires": []
    },
    {
        "id": "6e5ddfb6848b6013",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "extract date",
        "func": "var datefns = global.get('datefns');\nconst keys = Object.keys(msg.payload);\nif(!keys.length) {\n    return {payload: 'Datum nicht gefunden in Daten.'}\n}\nconst date = global.get('toDateFromKey')(Object.keys(msg.payload)[0]);\nconst zoneDate = global.get('toZonedDate')(date);\n\nreturn { payload: `Daten für ${datefns.format(zoneDate, \"dd.MM.yyyy\")}` };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 520,
        "wires": [
            [
                "ccd9d8a62a4caa7a"
            ]
        ]
    },
    {
        "id": "dbf24f3be6ed46a2",
        "type": "ui_led",
        "z": "53909232bb435dbf",
        "order": 2,
        "group": "5fe71c3fd07a84a7",
        "width": 0,
        "height": 0,
        "label": "Schaltzustand",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 1170,
        "y": 1240,
        "wires": []
    },
    {
        "id": "69b5a3c741b62380",
        "type": "switch",
        "z": "53909232bb435dbf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "data",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "errors",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 420,
        "wires": [
            [
                "c4d717c702fba9b0"
            ],
            [
                "1ea5849461455414",
                "dd6c5397e5bf24d5"
            ]
        ]
    },
    {
        "id": "1ea5849461455414",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "extract error message",
        "func": "return { payload: msg.payload.errors[0].message };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 560,
        "wires": [
            [
                "ccd9d8a62a4caa7a"
            ]
        ]
    },
    {
        "id": "ba0d2d2bbfe3ea42",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "fallback cost efficient hours",
        "func": "var datefns = global.get('datefns');\n\nconst fallbackHours = env.get('fallbackHours');\nconst date = global.get('toZonedDate')(new Date());\nconst dow = datefns.getDay(date);\nconst template = datefns.format(date, \"yyyy-MM-dd'T'HH\")\nconst costEfficientHours = flow.get('costEfficientHours');\nif (costEfficientHours) {\n    const costEfficientHoursDatePart = String(Array(costEfficientHours)[0]).substring(0, 10);\n    const templateDatePart = String(template).substring(0, 10);\n    if (costEfficientHoursDatePart === templateDatePart) {\n        node.debug('costEfficientHours is up-to-date - fallback hours not needed');\n    } else {\n        node.debug('costEfficientHours is NOT up-to-date');\n        if (fallbackHours) {\n            node.debug('using fallback hours');\n            const hourlyCost = new Map();\n            const hourlyCostSelected = new Map();\n            fallbackHours.forEach(entry => {\n                if (Array.isArray(entry)) {\n                    if (entry.length === 2) {\n                        const dayOrRange = entry[0];\n                        const hourOrRange = entry[1];\n                        if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                            global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                        }\n                    } else if (entry.length === 1) {\n                        const hourOrRange = entry[0];\n                        global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                    }\n                } else {\n                    const hourOrRange = entry;\n                    global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                }\n            });\n            return { payload: [...hourlyCostSelected.keys()] };\n        }\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 840,
        "wires": [
            [
                "155225f6120582e9",
                "7bb29d543d74996a"
            ]
        ]
    },
    {
        "id": "de4ca6b90e843c35",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "lib:functions",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "global.set('buildKey', function (template, hour) {\n    return template.substring(0, 11) + (Number(hour) < 10 ? `0${hour}` : hour);\n});\n\nglobal.set('getRangeBoundaries', function (range) {\n    return String(range).split('-').map(boundary => Number(boundary));\n});\n\nglobal.set('rangeContainsValue', function (value, range) {\n    const boundaries = String(range).split('-');\n    if (boundaries.length == 2) {\n        return Number(boundaries[0]) <= value && value <= Number(boundaries[1]);\n    }\n    return false;\n});\n\nglobal.set('addSelectedHours', function (template, hourOrRange, hourlyCostSelected, hourlyCost) {\n    const boundaries = global.get('getRangeBoundaries')(hourOrRange);\n    if (boundaries.length == 2) {\n        for (let hour = boundaries[0]; hour <= boundaries[1]; hour++) {\n            const key = global.get('buildKey')(template, hour)\n            hourlyCostSelected.set(key, hourlyCost.get(key) ?? 0);\n        }\n    } else {\n        const key = global.get('buildKey')(template, boundaries[0]);\n        hourlyCostSelected.set(key, hourlyCost.get(key) ?? 0);\n    }\n});\n",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f1a31f45d5ad032a",
        "type": "ui_form",
        "z": "53909232bb435dbf",
        "name": "",
        "label": "Partyzeit",
        "group": "5fe71c3fd07a84a7",
        "order": 8,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "von Stunde",
                "value": "partyHourStart",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "bis Stunde",
                "value": "partyHourEnd",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "partyHourStart": "",
            "partyHourEnd": ""
        },
        "payload": "",
        "submit": "Zeit hinzufügen",
        "cancel": "Abbrechen",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 1180,
        "y": 920,
        "wires": [
            [
                "01fca9e18423908c"
            ]
        ]
    },
    {
        "id": "01fca9e18423908c",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "add party time",
        "func": "var datefns = global.get('datefns');\n\nconst costEfficientHours = flow.get('costEfficientHours'); \nconst today = global.get('toZonedDate')(new Date());\nconst template = datefns.format(today, \"yyyy-MM-dd'T'HH\")\n\nconst hourlyCost = new Map();\nconst hourlyCostSelected = new Map();\nif(costEfficientHours) {\n    costEfficientHours.forEach( hour => hourlyCostSelected.set(hour, 0));\n}\n\nconst partyHourStart = msg.payload.partyHourStart;\nconst partyHourEnd = msg.payload.partyHourEnd;\nif (partyHourStart && partyHourEnd) {\n    global.get('addSelectedHours')(template, `${partyHourStart}-${partyHourEnd}`, hourlyCostSelected, hourlyCost);\n}\n\nreturn { payload: [...hourlyCostSelected.keys()] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 920,
        "wires": [
            [
                "155225f6120582e9",
                "7bb29d543d74996a"
            ]
        ]
    },
    {
        "id": "6c10c1f5d026d1c2",
        "type": "change",
        "z": "53909232bb435dbf",
        "name": "send timestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "d3a56c54933e3010",
                "b55dbfacaaa2e6ea"
            ]
        ]
    },
    {
        "id": "e18b2c32b3195faf",
        "type": "change",
        "z": "53909232bb435dbf",
        "name": "retry api call",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "74baf2009a51d306"
            ]
        ]
    },
    {
        "id": "c06b83343f2137ce",
        "type": "delay",
        "z": "53909232bb435dbf",
        "name": "delay retry",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 160,
        "wires": [
            [
                "e18b2c32b3195faf"
            ]
        ]
    },
    {
        "id": "dd6c5397e5bf24d5",
        "type": "delay",
        "z": "53909232bb435dbf",
        "name": "delay retry",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 570,
        "y": 480,
        "wires": [
            [
                "32dfc3cbe3a8e48b"
            ]
        ]
    },
    {
        "id": "32dfc3cbe3a8e48b",
        "type": "change",
        "z": "53909232bb435dbf",
        "name": "retry api call",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "d4af6a26fcce30b5"
            ]
        ]
    },
    {
        "id": "4898aa72b81edf1c",
        "type": "cronplus",
        "z": "53909232bb435dbf",
        "name": "trigger api calls",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "0 3 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 840,
        "wires": [
            [
                "ba0d2d2bbfe3ea42"
            ]
        ]
    },
    {
        "id": "972cd17af1593232",
        "type": "function",
        "z": "53909232bb435dbf",
        "name": "keep cost efficient hours of yesterday",
        "func": "var datefns = global.get('datefns');\n\nconst costEfficientHoursYesterday = flow.get('costEfficientHoursYesterday');\nnode.debug(`OLD: costEfficientHoursYesterday=${costEfficientHoursYesterday}`);\nconst costEfficientHours = flow.get('costEfficientHours');\nnode.debug(`OLD: costEfficientHours=${costEfficientHours}`);\nif (costEfficientHoursYesterday.length > 0) {\n    const datePartCostEfficientHoursYesterdayFirstItem = costEfficientHoursYesterday[0].substring(0, 10);\n    node.debug(`datePartCostEfficientHoursYesterdayFirstItem=${datePartCostEfficientHoursYesterdayFirstItem}`);\n\n    const dateMidnightCostEfficientHoursYesterday = datefns.parse(datePartCostEfficientHoursYesterdayFirstItem, \"yyyy-MM-dd\", global.get('toZonedDate')(new Date()));\n    node.debug(`dateMidnightCostEfficientHoursYesterday=${dateMidnightCostEfficientHoursYesterday}`);\n\n    let todayMidnight = global.get('toZonedDate')(new Date());\n    todayMidnight = datefns.setHours(todayMidnight, 0);\n    todayMidnight = datefns.setMinutes(todayMidnight, 0);\n    todayMidnight = datefns.setSeconds(todayMidnight, 0);\n    node.debug(`todayMidnight=${todayMidnight}`);\n\n    const differenceInDays = datefns.differenceInDays(todayMidnight, dateMidnightCostEfficientHoursYesterday);\n    node.debug(`differenceInDays=${differenceInDays}`);\n\n    if (differenceInDays !== 1) {\n        node.debug(`NEW: costEfficientHoursYesterday=${costEfficientHours}`);\n        flow.set('costEfficientHoursYesterday', costEfficientHours);\n    }\n} else {\n    node.debug(`NEW: costEfficientHoursYesterday=${costEfficientHours}`);\n    flow.set('costEfficientHoursYesterday', costEfficientHours);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a939facbcd32b607",
        "type": "cronplus",
        "z": "53909232bb435dbf",
        "name": "trigger api calls",
        "outputField": "payload",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [
            {
                "name": "schedule",
                "topic": "topic1",
                "payloadType": "date",
                "payload": "",
                "expressionType": "cron",
                "expression": "4 0 0 * * *",
                "location": "",
                "offset": "0",
                "solarType": "all",
                "solarEvents": "sunrise,sunset"
            }
        ],
        "x": 140,
        "y": 780,
        "wires": [
            [
                "972cd17af1593232"
            ]
        ]
    },
    {
        "id": "7bb29d543d74996a",
        "type": "change",
        "z": "53909232bb435dbf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "costEfficientHours",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "6c10c1f5d026d1c2"
            ]
        ]
    },
    {
        "id": "5fe71c3fd07a84a7",
        "type": "ui_group",
        "name": "Default",
        "tab": "a4cb99d3ee80a04f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a4cb99d3ee80a04f",
        "type": "ui_tab",
        "name": "Heizung",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]