[
    {
        "id": "a91155d20b6b741c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "112d3d41d7737f19",
        "type": "function",
        "z": "a91155d20b6b741c",
        "name": "function 1",
        "func": "// const mandatoryHours = [[1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 7], [0, 7]];\n//const mandatoryHours = [['1-5',   2,     [4]],          [6, '7-10'], [0, 7]];\n//const mandatoryHours = [['1-5', '1-4', 2, [4]]];\n//const mandatoryHours = [['1-5', '1-4', 2]];\n//const mandatoryHours = [[1, '1-4', 2]];\n//const mandatoryHours = [['1-5', 4]];\nconst mandatoryHours = [[2, 4]];\n//const mandatoryHours = [[2, '1-4']];\n//const mandatoryHours = [[4]];\n//const mandatoryHours = [4];\n\nconst powerConsumptionHours = 8;\n\n\nfunction rangeContainsValue(value, range) {\n    const boundaries = String(range).split('-');\n    if (boundaries.length == 2) {\n        return Number(boundaries[0]) <= value && value <= Number(boundaries[1]);\n    }\n    return false;\n}\n\nfunction getRangeBoundaries(range) {\n    return String(range).split('-').map(boundary => Number(boundary));\n}\n\nfunction sortMapByKey(input) {\n    return new Map([...input.entries()].sort());\n}\n\nfunction sortMapByValue(input) {\n    return new Map([...input.entries()].sort((a, b) => a[1] - b[1]));\n}\n\n// FIXME Ã¼ber global.flow machen\nfunction buildKey(template, hour) {\n    return template.substring(0, 11) + (Number(hour) < 10 ? `0${hour}` : hour);\n}\n\nconst hourKeys = Object.keys(msg.payload);\n\nconst hourlyCost = new Map();\nhourKeys.forEach(key => hourlyCost.set(key, msg.payload[key]));\n\nlet hourlyCostSelected = new Map();\nif (hourKeys.length > 0) {\n    const dow = 2;\n    if (mandatoryHours) {\n        mandatoryHours.forEach(entry => {\n            if (Array.isArray(entry)) {\n                if (entry.length === 3 || entry.length === 4) {\n                    const dayOrRange = entry[0];\n                    const hourRange = entry[1];\n                    const hoursToBeSelected = Number(entry[2]);\n                    const hoursMandatory = entry[3] ? Array(entry[3]) : [];\n                    if (rangeContainsValue(dow, dayOrRange) || dow === dayOrRange) {\n                        hoursMandatory.forEach(hour => {\n                            const key = buildKey(hourKeys[0], hour)\n                            hourlyCostSelected.set(key, hourlyCost.get(key));\n                        });\n                        const hourRangeWithCost = new Map();\n                        const boundaries = getRangeBoundaries(hourRange);\n                        for (let hour = boundaries[0]; hour <= boundaries[1]; hour++) {\n                            const key = buildKey(hourKeys[0], hour)\n                            hourRangeWithCost.set(key, hourlyCost.get(key));\n                        }\n                        const hourRangeWithCostSorted = sortMapByValue(hourRangeWithCost);\n                        Array.from(hourRangeWithCostSorted.keys()).forEach(key => {\n                            if (hourlyCostSelected.size < hoursToBeSelected) {\n                                hourlyCostSelected.set(key, hourRangeWithCostSorted.get(key));\n                            }\n                        });\n                    }\n                } else if(entry.length === 2) {\n                    const dayOrRange = entry[0];\n                    const hourOrRange = entry[1];\n                    if (rangeContainsValue(dow, dayOrRange) || dow === dayOrRange) {\n                        const boundaries = getRangeBoundaries(hourOrRange);\n                        if(boundaries.length == 2) {\n                            for (let hour = boundaries[0]; hour <= boundaries[1]; hour++) {\n                                const key = buildKey(hourKeys[0], hour)\n                                hourlyCostSelected.set(key, hourlyCost.get(key));\n                            }\n                        } else {\n                            const key = buildKey(hourKeys[0], boundaries[0]);\n                            hourlyCostSelected.set(key, hourlyCost.get(key));\n                        }\n                    }\n                } else if(entry.length === 1) {\n                    const hour = entry[0];\n                    const key = buildKey(hourKeys[0], hour);\n                    hourlyCostSelected.set(key, hourlyCost.get(key));\n                }\n            } else {\n                const hour = entry;\n                const key = buildKey(hourKeys[0], hour);\n                hourlyCostSelected.set(key, hourlyCost.get(key));\n            }\n            const hourlyCostSorted = sortMapByValue(hourlyCost);\n            Array.from(hourlyCostSorted.keys()).forEach(key => {\n                if (hourlyCostSelected.size < powerConsumptionHours) {\n                    hourlyCostSelected.set(key, hourlyCost.get(key));\n                }\n            });\n            hourlyCostSelected = sortMapByKey(hourlyCostSelected);\n            console.log('hourlyCostSelected=', hourlyCostSelected);\n        });\n    }\n}\nreturn { payload: [...hourlyCostSelected.keys()] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            [
                "4bc9f79bccb4823e"
            ]
        ]
    },
    {
        "id": "4bc9f79bccb4823e",
        "type": "debug",
        "z": "a91155d20b6b741c",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 480,
        "wires": []
    },
    {
        "id": "de6158bdd7b73c97",
        "type": "inject",
        "z": "a91155d20b6b741c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"2023-11-13T00\":\"0.21\",\"2023-11-13T01\":\"0.18\",\"2023-11-13T02\":\"0.25\",\"2023-11-13T03\":\"0.19\",\"2023-11-13T04\":\"0.23\",\"2023-11-13T05\":\"0.24\",\"2023-11-13T06\":\"0.16\",\"2023-11-13T07\":\"0.18\",\"2023-11-13T08\":\"0.20\",\"2023-11-13T09\":\"0.23\",\"2023-11-13T10\":\"0.21\",\"2023-11-13T11\":\"0.22\",\"2023-11-13T12\":\"0.23\",\"2023-11-13T13\":\"0.23\",\"2023-11-13T14\":\"0.23\",\"2023-11-13T15\":\"0.23\",\"2023-11-13T16\":\"0.23\",\"2023-11-13T17\":\"0.23\",\"2023-11-13T18\":\"0.23\",\"2023-11-13T19\":\"0.23\",\"2023-11-13T20\":\"0.23\",\"2023-11-13T21\":\"0.23\",\"2023-11-13T22\":\"0.23\",\"2023-11-13T23\":\"0.23\"}",
        "payloadType": "json",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "112d3d41d7737f19"
            ]
        ]
    }
]
