[
    {
        "id": "a91155d20b6b741c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "112d3d41d7737f19",
        "type": "function",
        "z": "a91155d20b6b741c",
        "name": "choose cost efficient hours",
        "func": "// const mandatoryHours = [[1, 4], [2, 4], [3, 4], [4, 4], [5, 4], [6, 7], [0, 7]];\n//const mandatoryHours = [['1-5',   2,     [4]],          [6, '7-10'], [0, 7]];\n//const mandatoryHours = [['1-5', '1-4', 2, [4]]];\n//const mandatoryHours = [['1-5', '1-4', 2]];\n//const mandatoryHours = [[1, '1-4', 2]];\n//const mandatoryHours = [['1-5', 4]];\n//const mandatoryHours = [[2, 4]];\n//const mandatoryHours = [[2, '1-4']];\n//const mandatoryHours = [[4]];\n//const mandatoryHours = [4];\n//const mandatoryHours = [['1-4']];\n//const mandatoryHours = ['1-4'];\nconst mandatoryHours = undefined;\n\nconst powerConsumptionHours = 8;\n\nfunction sortMapByKey(input) {\n    return new Map([...input.entries()].sort());\n}\n\nfunction sortMapByValue(input) {\n    return new Map([...input.entries()].sort((a, b) => a[1] - b[1]));\n}\n\nconst hourKeys = Object.keys(msg.payload);\n\nconst hourlyCost = new Map();\nhourKeys.forEach(key => hourlyCost.set(key, msg.payload[key]));\n\nlet hourlyCostSelected = new Map();\nif (hourKeys.length > 0) {\n    const template = hourKeys[0];\n    const dow = 2;\n    if (mandatoryHours) {\n        mandatoryHours.forEach(entry => {\n            if (Array.isArray(entry)) {\n                if (entry.length === 3 || entry.length === 4) {\n                    const dayOrRange = entry[0];\n                    const hourRange = entry[1];\n                    const hoursToBeSelected = Number(entry[2]);\n                    const hoursMandatory = entry[3] ? Array(entry[3]) : [];\n                    if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                        hoursMandatory.forEach(hour => {\n                            const key = global.get('buildKey')(template, hour)\n                            hourlyCostSelected.set(key, hourlyCost.get(key));\n                        });\n                        const hourRangeWithCost = new Map();\n                        global.get('addSelectedHours')(template, hourRange, hourRangeWithCost, hourlyCost);\n                        const hourRangeWithCostSorted = sortMapByValue(hourRangeWithCost);\n                        Array.from(hourRangeWithCostSorted.keys()).forEach(key => {\n                            if (hourlyCostSelected.size < hoursToBeSelected) {\n                                hourlyCostSelected.set(key, hourRangeWithCostSorted.get(key));\n                            }\n                        });\n                    }\n                } else if (entry.length === 2) {\n                    const dayOrRange = entry[0];\n                    const hourOrRange = entry[1];\n                    if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                        global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                    }\n                } else if (entry.length === 1) {\n                    const hourOrRange = entry[0];\n                    global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n                }\n            } else {\n                const hourOrRange = entry;\n                global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n            }\n        });\n    }\n    const hourlyCostSorted = sortMapByValue(hourlyCost);\n    Array.from(hourlyCostSorted.keys()).forEach(key => {\n        if (hourlyCostSelected.size < powerConsumptionHours) {\n            hourlyCostSelected.set(key, hourlyCost.get(key));\n        }\n    });\n    hourlyCostSelected = sortMapByKey(hourlyCostSelected);\n}\nconsole.log('hourlyCostSelected=', hourlyCostSelected)\nreturn { payload: [...hourlyCostSelected.keys()] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            [
                "4bc9f79bccb4823e"
            ]
        ]
    },
    {
        "id": "4bc9f79bccb4823e",
        "type": "debug",
        "z": "a91155d20b6b741c",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 480,
        "wires": []
    },
    {
        "id": "de6158bdd7b73c97",
        "type": "inject",
        "z": "a91155d20b6b741c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"2023-11-13T00\":\"0.21\",\"2023-11-13T01\":\"0.18\",\"2023-11-13T02\":\"0.25\",\"2023-11-13T03\":\"0.19\",\"2023-11-13T04\":\"0.23\",\"2023-11-13T05\":\"0.24\",\"2023-11-13T06\":\"0.16\",\"2023-11-13T07\":\"0.18\",\"2023-11-13T08\":\"0.20\",\"2023-11-13T09\":\"0.23\",\"2023-11-13T10\":\"0.21\",\"2023-11-13T11\":\"0.22\",\"2023-11-13T12\":\"0.23\",\"2023-11-13T13\":\"0.23\",\"2023-11-13T14\":\"0.23\",\"2023-11-13T15\":\"0.23\",\"2023-11-13T16\":\"0.23\",\"2023-11-13T17\":\"0.23\",\"2023-11-13T18\":\"0.23\",\"2023-11-13T19\":\"0.23\",\"2023-11-13T20\":\"0.23\",\"2023-11-13T21\":\"0.23\",\"2023-11-13T22\":\"0.23\",\"2023-11-13T23\":\"0.23\"}",
        "payloadType": "json",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "112d3d41d7737f19"
            ]
        ]
    },
    {
        "id": "45481d6514d095c9",
        "type": "function",
        "z": "a91155d20b6b741c",
        "name": "fallback cost efficient hours",
        "func": "// in Config verschieben\nconst fallbackMandatoryHours = ['1-4'];\n\nconst dow = 2;\nconst template = '2023-11-13T00';\nconst hourlyCost = new Map();\nconst hourlyCostSelected = new Map();\n\nif (fallbackMandatoryHours) {\n    fallbackMandatoryHours.forEach(entry => {\n        if (Array.isArray(entry)) {\n            if (entry.length === 2) {\n                const dayOrRange = entry[0];\n                const hourOrRange = entry[1];\n                if (global.get('rangeContainsValue')(dow, dayOrRange) || dow === Number(dayOrRange)) {\n                    global.get('addSelectedHours')(hourOrRange, hourlyCostSelected, hourlyCost);\n                }\n            } else if (entry.length === 1) {\n                const hourOrRange = entry[0];\n                global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n            }\n        } else {\n            const hourOrRange = entry;\n            global.get('addSelectedHours')(template, hourOrRange, hourlyCostSelected, hourlyCost);\n        }\n        console.log('hourlyCostSelected=', hourlyCostSelected);\n    });\n}\n\nreturn { payload: [...hourlyCostSelected.keys()] };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 560,
        "wires": [
            [
                "4bc9f79bccb4823e"
            ]
        ]
    },
    {
        "id": "c4f32c94699ed312",
        "type": "inject",
        "z": "a91155d20b6b741c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 560,
        "wires": [
            [
                "45481d6514d095c9"
            ]
        ]
    },
    {
        "id": "16890b0b8f71d8dc",
        "type": "function",
        "z": "a91155d20b6b741c",
        "name": "lib:functions",
        "func": "",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "global.set('buildKey', function (template, hour) {\n    return template.substring(0, 11) + (Number(hour) < 10 ? `0${hour}` : hour); \n});\n\nglobal.set('getRangeBoundaries', function (range) {\n    return String(range).split('-').map(boundary => Number(boundary));\n});\n\nglobal.set('rangeContainsValue', function (value, range) {\n    const boundaries = String(range).split('-');\n    if (boundaries.length == 2) {\n        return Number(boundaries[0]) <= value && value <= Number(boundaries[1]);\n    }\n    return false;\n});\n\nglobal.set('addSelectedHours', function (template, hourOrRange, hourlyCostSelected, hourlyCost) {\n    console.log('hourOrRange=', hourOrRange);\n    const boundaries = global.get('getRangeBoundaries')(hourOrRange);\n    console.log('boundaries=', boundaries);\n    if (boundaries.length == 2) {\n        for (let hour = boundaries[0]; hour <= boundaries[1]; hour++) {\n            const key = global.get('buildKey')(template, hour)\n            hourlyCostSelected.set(key, hourlyCost.get(key) ?? 0);\n        }\n    } else {\n        const key = global.get('buildKey')(template, boundaries[0]);\n        hourlyCostSelected.set(key, hourlyCost.get(key) ?? 0);\n    }\n});\n",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    }
]